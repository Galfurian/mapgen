[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mapgen"
version = "0.1.0"
description = "A Python library for procedural fantasy map generation"
readme = "README.md"
license = { file = "LICENSE.md" }
requires-python = ">=3.10"
authors = [{ name = "Enrico", email = "enrico@example.com" }]
maintainers = [{ name = "Enrico", email = "enrico@example.com" }]
keywords = ["map", "generation", "fantasy", "procedural", "noise"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Multimedia :: Graphics",
]
dependencies = [
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "noise>=1.2.2",
    "networkx>=2.6.0",
    "types-networkx>=3.5.0",
    "scipy>=1.7.0",
    "scipy-stubs>=1.0.0",
    "scikit-learn>=1.0.0",
    "Pillow>=8.0.0",
    "onymancer>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "ruff>=0.14.0",
    "pydantic>=2.0.0",
]
docs = ["sphinx>=4.0.0", "sphinx-rtd-theme>=1.0.0"]
web = [
    "streamlit>=1.28.0",
]

[project.urls]
Homepage = "https://github.com/Galfurian/mapgen"
Repository = "https://github.com/Galfurian/mapgen"
Issues = "https://github.com/Galfurian/mapgen/issues"
Changelog = "https://github.com/Galfurian/mapgen/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/mapgen"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mapgen"]
known_third_party = [
    "numpy",
    "matplotlib",
    "noise",
    "networkx",
    "scipy",
    "sklearn",
]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
follow_imports = "normal"
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
extra_checks = true
check_untyped_defs = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-self", "truthy-iterable"]
disable_error_code = [
    "annotation-unchecked",
    "import-not-found",
    "import-untyped",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=mapgen --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]


[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DJ",  # django
    "EXE", # flake8-executable
    "T10", # debugger
    "TID", # flake8-tidy-imports

    "D203", # incorrect-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "D213", # multi-line-summary-second-line
    "D401", # First line of docstring should be in imperative mood
    "D205", # 1 blank line required between summary line and description
    "D200", # One-line docstring should fit on one line with quotes

    # Ignore some rules
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "ERA001", # Found commented-out code
    "TRY003", # Avoid specifying long messages outside the exception class
    "S311",   # random usage appropriate for data generation
    "S603",   # subprocess call security
    "NPY002", # np.random.seed legacy

    # Ignore not useful for tests
    "S101",    # Use of assert detected (fine in tests)
    "PLR2004", # Magic value used in comparison
    "PLW2901", # redefined-loop-name (acceptable in PyTorch/ML code)
    "TRY301",  # raise-within-try (appropriate for input validation)

    # Style preferences
    "G004",    # f-string logging
    "FBT",     # Boolean positional arg issues
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "SIM102",  # Nested if
    "RUF012",  # Mutable class attributes
    "PERF401", # List comprehension
    "PERF403", # Dict comprehension
    "E501",    # Line too long
    "D404",    # Docstring first word
    "N812",    # Import naming
    "SIM210",  # Unnecessary True if
    "N806",    # Variable naming
    "C403",    # Unnecessary list comp
    "SIM103",  # Return negated
    "C408",    # Unnecessary list()
    "PT006",   # Pytest parametrize
    "RUF043",  # Regex patterns
    "SIM117",  # Nested with
    "D105",    # Missing docstring magic
    "SIM118",  # key not in dict.keys
    "RET504",  # Unnecessary assignment
    "D417",    # Missing arg desc
    "PTH",     # Pathlib usage
    "DTZ005",  # datetime.now with timezone.utc is correct for py39+
    "UP017",   # datetime.UTC requires py311+, project supports py39+
]
